// GENERATED CODE - DO NOT MODIFY BY HAND
// This file will be generated by injectable_generator via build_runner.
// It is included to keep the project compiling before code generation.

import 'package:get_it/get_it.dart';
import 'package:http/http.dart' as http;
import 'package:injectable/injectable.dart' as injectable;

import '../../features/portfolio/data/datasources/portfolio_remote_datasource.dart'
    as portfolio_datasource;
import '../../features/portfolio/data/repositories/portfolio_repository_impl.dart'
    as portfolio_repository_impl;
import '../../features/portfolio/domain/repositories/portfolio_repository.dart'
    as portfolio_repository;
import '../../features/portfolio/domain/usecases/get_portfolio.dart' as get_portfolio_usecase;
import '../../features/portfolio/presentation/bloc/portfolio_bloc.dart'
    as portfolio_bloc;

extension GetItInjectableX on GetIt {
  GetIt init({String? environment}) {
    final gh = injectable.GetItHelper(this, environment);
    gh.factory<http.Client>(() => http.Client());
    gh.lazySingleton<portfolio_datasource.PortfolioRemoteDataSource>(
        () => portfolio_datasource.PortfolioRemoteDataSourceImpl(gh<http.Client>()));
    gh.lazySingleton<portfolio_repository.PortfolioRepository>(
        () => portfolio_repository_impl.PortfolioRepositoryImpl(gh<portfolio_datasource.PortfolioRemoteDataSource>()));
    gh.factory<get_portfolio_usecase.GetPortfolioUseCase>(
        () => get_portfolio_usecase.GetPortfolioUseCase(gh<portfolio_repository.PortfolioRepository>()));
    gh.factory<portfolio_bloc.PortfolioBloc>(
        () => portfolio_bloc.PortfolioBloc(gh<get_portfolio_usecase.GetPortfolioUseCase>()));
    return this;
  }
}
